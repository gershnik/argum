name: Test

on: 
  push:
    paths-ignore:
      - 'README.md'
      - '.gitignore'
      - 'LICENSE'
      - 'CHANGELOG.md'
      - 'doc/**'
      - 'github/workflows/publish.yml'

env:
  BUILD_TYPE: Release
  NDK_VER: 23.1.7779620
  NDK_ARCH: x86_64
  NDK_API: 29
  GCC_VER: 11

jobs:
  desktop:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
        - os: macos-latest
        
        - os: windows-latest
        
        - {os: ubuntu-latest, compiler: gcc, version: 11 }
        - {os: ubuntu-latest, compiler: gcc, version: 12 }
        - {os: ubuntu-latest, compiler: gcc, version: 13 }
        - {os: ubuntu-24.04, compiler: gcc, version: 14 }

        - {os: ubuntu-22.04, compiler: clang, version: 13 }
        - {os: ubuntu-22.04, compiler: clang, version: 14 }
        - {os: ubuntu-22.04, compiler: clang, version: 15 }
        - {os: ubuntu-22.04, compiler: clang, version: 16 }
        - {os: ubuntu-latest, compiler: clang, version: 17 }
        - {os: ubuntu-latest, compiler: clang, version: 18 }
        - {os: ubuntu-latest, compiler: clang, version: 19 }
        - {os: ubuntu-latest, compiler: clang, version: 20 }
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: System Setup
      shell: bash
      run: |
        if [[ '${{ matrix.os }}' == 'ubuntu-*' ]]; then
          if [[ '${{ matrix.compiler }}' == 'clang' ]]; then
            wget https://apt.llvm.org/llvm.sh
            chmod u+x llvm.sh
            sudo ./llvm.sh ${{ matrix.version }} 
            sudo apt-get install -y clang-tools-${{ matrix.version }} libc++-${{ matrix.version }}-dev libc++abi-${{ matrix.version }}-dev
            echo "CC=clang-${{ matrix.version }}" >> $GITHUB_ENV
            echo "CXX=clang++-${{ matrix.version }}" >> $GITHUB_ENV
            echo "CXXFLAGS=-stdlib=libc++" >> $GITHUB_ENV
          fi

          if [[ '${{ matrix.compiler }}' == 'gcc' ]]; then
            sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
            sudo apt-get update
            sudo apt-get install -y gcc-${{ matrix.version }} g++-${{ matrix.version }}
            echo "CC=gcc-${{ matrix.version }}" >> $GITHUB_ENV
            echo "CXX=g++-${{ matrix.version }}" >> $GITHUB_ENV
          fi
        fi

    - name: Configure
      shell: bash
      run: |
        cmake -S . -B out -DCMAKE_BUILD_TYPE=$BUILD_TYPE 

    - name: Build and Test
      shell: bash
      run: cmake --build out --config $BUILD_TYPE --target run-test

  android:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Enable KVM
      run: |
        echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
        sudo udevadm control --reload-rules
        sudo udevadm trigger --name-match=kvm

    - name: AVD cache
      uses: actions/cache@v4
      id: avd-cache
      with:
        path: |
          ~/.android/avd/*
          ~/.android/adb*
        key: avd-${{env.NDK_VER}}-${{env.NDK_ARCH}}-${{env.NDK_API}}

    - name: Create AVD and generate snapshot for caching
      if: steps.avd-cache.outputs.cache-hit != 'true'
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: ${{env.NDK_API}}
        arch: ${{env.NDK_ARCH}}
        target: google_apis
        ndk: ${{env.NDK_VER}}
        force-avd-creation: false
        emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -no-metrics
        disable-animations: false
        script: echo "Generated AVD snapshot for caching."

    - name: Configure, Build and Test
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: ${{env.NDK_API}}
        arch: ${{env.NDK_ARCH}}
        target: google_apis
        ndk: ${{env.NDK_VER}}
        emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -no-metrics
        disable-animations: true
        script: |
            echo "::group::Configure"
            cmake -S . -B out -DCMAKE_BUILD_TYPE:STRING=$BUILD_TYPE -DCMAKE_TOOLCHAIN_FILE:FILEPATH=$ANDROID_SDK_ROOT/ndk/$NDK_VER/build/cmake/android.toolchain.cmake -DANDROID_ABI:STRING=$NDK_ARCH -DANDROID_PLATFORM:STRING=$NDK_API -DANDROID_STL:STRING=c++_static
            echo "::endgroup::"
            echo "::group::Build and Test"
            cmake --build out --config $BUILD_TYPE --target run-test
            echo "::endgroup::"

    
